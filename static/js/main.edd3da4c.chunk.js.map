{"version":3,"sources":["Presentational/NewTask.js","Presentational/TasksList.js","App.js","reportWebVitals.js","index.js"],"names":["NewTask","newTask","handleChange","handleSubmit","onSubmit","name","placeholder","value","title","onChange","description","type","TasksList","allTasks","handleDelete","map","id","onClick","AppFunction","useState","setNewTask","setAllTasts","target","console","log","prev","Date","now","event","preventDefault","taskIdToRemove","filter","task","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"4PAEe,SAASA,EAAT,GAA2D,IAAxCC,EAAuC,EAAvCA,QAASC,EAA8B,EAA9BA,aAAcC,EAAgB,EAAhBA,aACvD,OACE,uBAAMC,SAAUD,EAAhB,UACE,uBACEE,KAAK,QACLC,YAAY,YACZC,MAAON,EAAQO,OAAS,GACxBC,SAAUP,IAEVD,EAAQO,MACR,qCACE,0BACEH,KAAK,cACLC,YAAY,aACZC,MAAON,EAAQS,aAAe,GAC9BD,SAAUP,IAEZ,wBAAQS,KAAK,SAAb,yBARc,QCTT,SAASC,EAAT,GAAgD,IAA3BC,EAA0B,EAA1BA,SAAUC,EAAgB,EAAhBA,aAC5C,OACE,6BACGD,EAASE,KAAI,gBAAGP,EAAH,EAAGA,MAAOE,EAAV,EAAUA,YAAaM,EAAvB,EAAuBA,GAAvB,OACZ,+BACE,gCACE,6BAAKR,IACL,wBAAQS,QAAS,kBAAMH,EAAaE,IAApC,kBAEAN,EAAqB,4BAAIA,IAAX,OALTM,QCDF,SAASE,IAAe,IAAD,EACNC,mBAAS,IADH,mBAC7BlB,EAD6B,KACpBmB,EADoB,OAQJD,mBAAS,IARL,mBAQ7BN,EAR6B,KAQnBQ,EARmB,KAqBpC,OACE,iCACE,uCACA,cAACrB,EAAD,CACEC,QAASA,EACTC,aAxBe,SAAC,GAAgB,IAAdoB,EAAa,EAAbA,OACxBC,QAAQC,IAAIF,GADyB,IAE3BjB,EAAgBiB,EAAhBjB,KAAME,EAAUe,EAAVf,MACda,GAAW,SAACK,GAAD,mBAAC,eAAeA,GAAhB,gBAAsBT,GAAIU,KAAKC,OAAQtB,EAAOE,QAsBrDJ,aAlBe,SAACyB,GACpBA,EAAMC,iBACD5B,EAAQO,QACba,GAAY,SAACI,GAAD,OAAWxB,GAAX,mBAAuBwB,OACnCL,EAAW,QAgBT,cAACR,EAAD,CAAWC,SAAUA,EAAUC,aAdd,SAACgB,GACpBT,GAAY,SAACI,GAAD,OAAUA,EAAKM,QACzB,SAACC,GAAD,OAAUA,EAAKhB,KAAOc,cCtB5B,IAYeG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,UAM1BZ,M","file":"static/js/main.edd3da4c.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function NewTask({ newTask, handleChange, handleSubmit }) {\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input\r\n        name=\"title\"\r\n        placeholder=\"New taskl\"\r\n        value={newTask.title || \"\"}\r\n        onChange={handleChange}\r\n      />\r\n      {!newTask.title ? null : (\r\n        <>\r\n          <textarea\r\n            name=\"description\"\r\n            placeholder=\"Details...\"\r\n            value={newTask.description || \"\"}\r\n            onChange={handleChange}\r\n          />\r\n          <button type=\"submit\">Add Task</button>\r\n        </>\r\n      )}\r\n    </form>\r\n  );\r\n}","import React from \"react\";\r\n\r\nexport default function TasksList({ allTasks, handleDelete }) {\r\n  return (\r\n    <ul>\r\n      {allTasks.map(({ title, description, id }) => (\r\n        <li key={id}>\r\n          <div>\r\n            <h2>{title}</h2>\r\n            <button onClick={() => handleDelete(id)}>X</button>\r\n          </div>\r\n          {!description ? null : <p>{description}</p>}\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n","import './App.css';\nimport React, { useState } from \"react\";\nimport NewTask from \"./Presentational/NewTask\";\nimport TasksList from \"./Presentational/TasksList\";\n\nexport default function AppFunction() {\n  const [newTask, setNewTask] = useState({});\n  const handleChange = ({ target }) => {\n  console.log(target);\n    const { name, value } = target;\n    setNewTask((prev) => ({ ...prev, id: Date.now(), [name]: value }));\n  };\n\n  const [allTasks, setAllTasts] = useState([]);\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    if (!newTask.title) return;\n    setAllTasts((prev) => [newTask, ...prev]);\n    setNewTask({});\n  };\n  const handleDelete = (taskIdToRemove) => {\n    setAllTasts((prev) => prev.filter(\n      (task) => task.id !== taskIdToRemove\n    ));\n  };\n\n  return (\n    <main>\n      <h1>Tasks</h1>\n      <NewTask\n        newTask={newTask}\n        handleChange={handleChange}\n        handleSubmit={handleSubmit}\n      />\n      <TasksList allTasks={allTasks} handleDelete={handleDelete} />\n    </main>\n  );\n}\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <App />,\n  document.getElementById(\"root2\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}